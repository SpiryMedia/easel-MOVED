// calculate widths
$column-outer-width: $column-width + $column-gutter;
$container-width: $column-outer-width * $column-count - $column-gutter;
$container-offset-x: 0 !default;

// container
@mixin container(
  $width: $container-width,
  $offset-x: $container-offset-x) {
  width: $width + $offset-x;
  margin: 0 auto;
	@include clearfix;
}

// columns
@mixin column(
  $n: false,
  $column-width: $column-width,
  $column-gutter: $column-gutter,
  $offset-x: 0,
  $last: false) {
  @include float(left);
  @if $n {
    width: column-width($n, $column-width, $column-gutter, $offset-x);
  }
	@if $last {
    @include last;
  }
  @else {
    margin-right: $column-gutter;
  }
}

@function column-width(
  $n,
  $column-width,
  $column-gutter,
  $offset-x
) {
  @return $column-width * $n + $column-gutter * ($n - 1) + $offset-x;
}

@mixin last {
  margin-right: 0;
}

// append
@mixin append($n, $offset-x: 0) {
  padding-right: $column-outer-width * $n + $offset-x;
}

//prepend
@mixin prepend($n, $offset-x: 0) {
  padding-left: $column-outer-width * $n + $offset-x;
}

// pull
@mixin pull($n, $last: false, $offset-x: 0) {
  @if $last {
    margin-left: -$column-outer-width * $n + $column-gutter + $offset-x;
  }
  @else {
    margin-left: -$column-outer-width * $n + $offset-x;
  }
}

// push
@mixin push($n, $last: false, $offset-x: 0) {
  @if $last {
    margin-left: $column-outer-width * $n + $column-gutter + $offset-x;
  }
  @else {
    margin-left: $column-outer-width * $n + $offset-x;
  }
}

// grid classes
@mixin grid {
  @for $n from 1 through $column-count {
  	.col-#{$n} {
  		@include column($n);
  	}
  	.append-#{$n} {
  		@include append($n);
  	}
  	.prepend-#{$n} {
  		@include prepend($n);
  	}
  	.pull-#{$n} {
  	  @include pull($n);
  	}
  	.push-#{$n} {
  	  @include push($n);
  	}
  }

  .col-#{$column-count},
  .col-last {
  	@include last;
  }
  .col {
    @include column;
  }
  .container {
    @include container;
  } 
}
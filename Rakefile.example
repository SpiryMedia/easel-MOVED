# to see a list of rake commands, type "rake -T" on the command line
# to get started with a new site, type "rake setup"

prefix = File.dirname( __FILE__ )

# vvvvv USER CONFIGURATION vvvvvvvv

# main directories
easel_dir = 'submodules/easel_framework'
script_dir = 'sites/website/public/assets/scripts'

# extras
extras = [
  "min"
]

# github repos
repos = { "cycle" => "malsup",
          # "jquery-ui" => "jquery",
          # "LABjs" => "getify",
          # "jqanalyze" => "mennovanslooten",
          # "jquery-dotimeout" => "cowboy",
          # "jquery-bbq" => "cowboy",
          # "TransformJS" => "sproutcore",
          "Modernizr" => "Modernizr",
          "JSON-js" => "douglascrockford",
          "mediaelement" => "johndyer",
          "Respond" => "scottjehl",
          "jquery-carousel-lite" => "kswedberg",
          "jquery-defaulttext" => "kswedberg",
          "jquery-tinyvalidate" => "kswedberg"
        }

# ^^^^^^ USER CONFIGURATION ^^^^^^^


# Directory variables
lib_dir = 'lib'
# Different scripts and lib directories can be set by
# setting DIR and/or LIB when calling rake
script_dir = ENV['DIR'] || script_dir
scr_dir    = script_dir
script_dir = File.join( prefix, script_dir )
lib_dir    = ENV['LIB'] || lib_dir
lib_dir    = File.join( script_dir, lib_dir )

easel_script_dir = File.join( prefix, easel_dir, 'easel/scripts' )

# Build and QUnit files/dirs
config_dir   = File.join( prefix, easel_dir, 'config' )
repo_dir     = File.join( config_dir, 'repos')
build_dir    = File.join( config_dir, 'build' )
test_dir     = File.join( build_dir, 'test' )
qunit_dir    = File.join( test_dir, "qunit" )
funcunit_dir = File.join( test_dir, "funcunit")
qunit        = File.join( qunit_dir, "qunit", "qunit.js" )

dirhash = {
  scr_dir => "#{scr_dir}",
  script_dir => "#{script_dir}",
  lib_dir => "#{lib_dir}",
  config_dir => "#{config_dir}",
  repo_dir => "#{repo_dir}",
  build_dir => "#{build_dir}",
  test_dir => "#{test_dir}",
  qunit_dir => "#{qunit_dir}",
  funcunit_dir => "#{funcunit_dir}"
}

yuimin = File.join( "#{build_dir}", "yuicompressor-2.4.2.jar")

# Turn off output other than needed from `sh` and file commands
verbose(false)

# LOAD extras
# extras.each do |fl|
#   require File.join( easel_dir, "config/rake/", "#{fl}.rb")
# end


###############
#### Tasks ####
###############

task :default => "all"

###
desc "Sets up site with JS files/plugins/repos and cleans up after itself"
task :all => [:setup] do
  Rake::Task[:clean].invoke
  puts "Everything in its right place."
end

###
desc "Minifies js file - rake minfile[file.js[, altScriptDir]]"
task :minfile, [:file, :dir] => [scr_dir] do |t, args|
  args.with_defaults(:file => nil, :dir => scr_dir)
  if args.file.nil? then
    puts "Pick a file, dude."
    exit
  end

  dir = File.join(prefix, "#{args.dir}")
  mindir = dir

  minbase = ask("Specify a subdirectory for the minified file? ... [subdir/n]")
  minbase ||= "n"

  if (minbase != "n") then
    mindir = File.join(dir, "#{minbase}")
    mkdir_p "#{mindir}"
  end

  min_file(dir, mindir, args.file, yuimin)

end

###
desc "Minifies all js files within a given directory - rake mindir[[altScriptDir]]"
task :mindir, [:dir] => [scr_dir] do |t, args|
  dir = File.join(prefix, "#{args.dir}")
  mindir = dir

  minbase = ask("Specify a subdirectory for the minified file? ... [subdir/n]")
  minbase ||= "n"

  if (minbase != "n") then
    mindir = File.join(dir, "#{minbase}")
    mkdir_p "#{mindir}"
  end

  min_dir(dir, mindir, yuimin)

end
###
desc "Updates js from GitHub/lib - rake update[lib/jquery/all/[reponame],[?repoauthor]"
task :update, [:which, :auth] => [repo_dir, script_dir, lib_dir] do |t, args|
  args.with_defaults(:which => "lib", :auth => nil)
  auth = args.auth

  case args.which
  when "repos"
    Rake::Task[:clonepull].invoke

    repos.each  do |k,v|
      copy_repo("#{repo_dir}/#{k}", lib_dir)
    end
  when "jquery"
    Rake::Task[:updatejquery].invoke

  when "all"
    Rake::Task[:updatejquery].invoke
    Rake::Task[:clonepull].invoke

    repos.each  do |k,v|
      copy_repo("#{repo_dir}/#{k}", lib_dir)
    end
    Rake::Task[:updatescripts].invoke("scripts_lib")
  when "lib"
    Rake::Task[:updatescripts].invoke("lib")
  else
    auth ||= repos["#{args.which}"]
    Rake::Task[:updaterepo].invoke(args.which, auth)
  end

  puts "Update routine completed for #{args.which}"
end

###
desc "Updates js from easel dir: rake updatescripts[lib/scripts/[somescriptname]]"
task :updatescripts, [:which] => [easel_script_dir, lib_dir] do |t, args|
  if args.which.nil?
    puts "What do you want to update from easel?"
    puts "scripts directory:"
    puts "    rake updatescripts[scripts]"
    puts "lib directory:"
    puts "    rake updatescripts[lib]"
    puts "particular script?"
    puts "utils.js:"
    puts "    rake updatescripts[utils]"
    puts "lib/fm.log.js:"
    puts "    rake updatescripts[lib/fm.log]"

  elsif easel_script_dir == script_dir then
    puts "Not gonna do it. easel directory and scripts directory are the same"
  else
    case args.which
    when "scripts"
      copy_files(easel_script_dir, script_dir)
    when "lib"
      copy_files(File.join(easel_script_dir,"lib"), lib_dir)
    when "scripts_lib"
      copy_files(easel_script_dir, script_dir)
      copy_files(File.join(easel_script_dir,"lib"), lib_dir)
    else
      base_script = args.which.sub(".js", "") + ".js"
      from_script = File.join( easel_script_dir, base_script )

      if File.exist?(from_script) then
        to_script = File.join( script_dir, base_script )
        puts "copying from #{from_script} to #{to_script}"
        cp(from_script, to_script)
      else
        puts "File doesn't exist in Easel:"
        puts "#{from_script}"
      end
    end
  end

end

###
desc "Adds js from easel dir only if not already in project dir: rake addscripts[all/scripts/lib]"
task :addscripts, [:which] => [easel_script_dir, lib_dir] do |t, args|
  scr = args.which

  if scr.nil?
    puts "Which script or directory do you want to add?"
  elsif easel_script_dir == script_dir then
    puts "Not gonna do it. easel and scripts directory are the same"
  else
    case scr
    when "all"
      add_files(easel_script_dir, script_dir)
      add_files(File.join(easel_script_dir,"lib"), script_dir)
    when "scripts"
      add_files(easel_script_dir, script_dir)
    when "lib"
      add_files(File.join(easel_script_dir,"lib"), script_dir)
    else
      base_script = scr.sub(".js", "") + ".js"
      from_script = File.join( easel_script_dir, base_script )
      to_script = File.join( script_dir, base_script )

      if File.exist?(from_script) && !File.exist?(to_script) then
        cp( from_script, to_script )
        puts "Added #{scr} from easel to #{to_script}"
      else
        msg = File.exist?(from_script) ? "Script already exists in #{to_script}" : "Can't find #{from_script}"
        puts "Not added: #{msg}"
      end
    end

  end
end

###
desc "Updates a particular repo: rake updaterepo[reponame]"
task :updaterepo, [:repo, :author] => [repo_dir, lib_dir] do |t, args|
  rep = args.repo
  auth = args.author
  if auth.nil? && repos.has_key?("#{rep}") then
    auth = repos["#{rep}"]
  end

  if (auth) then
    Rake::Task[:clonepull].invoke("#{rep}", "#{auth}")
    copy_repo("#{repo_dir}/#{rep}", lib_dir)
    puts "updated #{rep} in #{lib_dir}"
  else
    puts "Couldn't find that repo in the hash. Add it to the Rakefile."
  end
end

###
desc "Clones repos if necessary; otherwise pulls latest"
task :clonepull, [:repo, :author] => [repo_dir, lib_dir] do |t, args|
  args.with_defaults(:repo => "all", :author => nil)

  if args.repo == "all" then
    repos.each_pair do |k,v|
      rdir = File.join(repo_dir, "#{k}")
      rdir_git = File.join( rdir, '.git')
      mkdir_p rdir

      if File.exist?( rdir_git )
        puts "Updating #{k} with latest..."
        sh "git --git-dir=#{rdir_git} pull -q origin master"
      else
        puts "Cloning #{k} from Github..."
        sh "git clone git://github.com/#{v}/#{k}.git #{rdir}"
      end

    end

    clone_or_pull("qunit", "jquery", test_dir)
  elsif args.repo == "qunit" then
    clone_or_pull("qunit", "jquery", test_dir)
  elsif args.repo == "funcunit" then
    clone_or_pull("funcunit", "jupiterjs", test_dir)
  else
    clone_or_pull( args.repo, args.author, repo_dir)
  end

end

###
desc "Updates QUnit and sets up test files in a test directory"
task :test do

  Rake::Task[:clonepull].invoke("qunit")
  script_test = File.join(script_dir, "test")
  script_qunit = File.join(script_test, "qunit")
  mkdir_p script_test
  mkdir_p script_qunit

  cp( qunit, script_qunit )
  cp( File.join(qunit_dir, "qunit/qunit.css"), script_qunit )
  if !File.exist?( File.join(script_test, "index.html") ) then
    cp( File.join(test_dir, "index.html"), script_test )
  end
  touch( File.join(script_test, "tests.js") )
end

###
desc "Updates jQuery core to latest stable release"
task :updatejquery => [lib_dir] do
  jq_latest = File.join( lib_dir, "jquery-latest.js" )
  touch( "#{jq_latest}" )
  jq_url = "http://code.jquery.com/jquery-latest.js"

  puts "downloading jQuery from #{jq_url}..."
  sh "wget -O #{jq_latest} #{jq_url}"
  puts "copied jQuery core to #{jq_latest}"

  v_latest = IO.readlines(jq_latest)[0..4].join()
  v_latest = v_latest.scan(/Library v(1.+)$/)
  jq_latest_file_name = "jquery-#{v_latest}.js"
  jq_version = File.join( lib_dir, jq_latest_file_name )

  if !File.exist?( jq_version ) then
    cp( jq_latest, jq_version )
    puts "******************* vv NOTICE vv ***********************\n"
    puts "***** New jQuery file added to lib directory: #{jq_latest_file_name} *****"
  end

end

###
desc "Sets up site with JS files/plugins/repos"
task :setup do
  Rake::Task[:update].invoke("all")
  puts "JS setup complete!"
end

###
desc "Removes cloned repos"
task :clean do
  puts "Removing repo directory: #{repo_dir}..."
  rm_rf repo_dir

  puts "Removing temporary qunit directory..."
  rm_rf qunit_dir
  puts "All clean!"
end

###
desc "Removes cloned repos and lib directory"
task :purge do
  sure = ask("Are you sure you want to remove cloned repos and\n #{lib_dir}?\n[y/N]")

  if sure == "y" then
    puts "Removing repo directory: #{repo_dir}..."
    rm_rf repo_dir

    puts "Removing temporary qunit directory..."
    rm_rf qunit_dir

    puts "Removing lib directory: #{lib_dir}..."
    rm_rf lib_dir

    puts "All purged!"
  else
    puts "Aborted purge. Everything intact."
  end

end

#####################
##### FUNCTIONS #####
#####################

# copy .js files from one dir to another
def copy_files(from_dir, to_dir)

  FileList["#{from_dir}/*.js"].each do |fl|
    update_file = File.join( to_dir, File.basename(fl) )
    puts "copying #{fl}"
    puts "updating #{update_file}"
    cp( fl, update_file )
  end
end

# copy .js files to project dirs only if not already there
def add_files(from_dir, to_dir)
  if to_dir.nil? then
    puts "Sorry"
  else
    FileList["#{from_dir}/*.js"].each do |fl|
      add_file = File.join( to_dir, File.basename(fl) )
      if File.exist?( add_file )
        puts "Not added (file exists): #{add_file}"
      else
        cp( fl, add_file )
        puts "Added #{add_file}"
      end
    end
  end
end

# copy repos from repos dir to lib dir
def copy_repo(from_dir, to_dir)
  from_base_dir = File.basename(from_dir)

  if File.exist?(from_dir) then
    to_repo_dir = File.join(to_dir, from_base_dir)
    mkdir_p to_repo_dir

    if from_base_dir == 'jquery-ui' then
      # run jQuery UI's ant script without minifying or creating zip
      sh "cd #{from_dir}/build && ant clean copy concatenate"

      # after initial build, create temporary dirs to trick ant
      ui_dist_dir = File.join(from_dir, "build/dist")
      ui_deploy_dir = FileList["#{ui_dist_dir}/*"].exclude(/\.zip$/)
      ui_deploy_dir_s = ui_deploy_dir.to_s()

      mkdir_p File.join(ui_deploy_dir_s, "ui", "minified")
      mkdir_p File.join(ui_deploy_dir_s, "ui-headered")
      mkdir_p File.join(ui_deploy_dir_s, "themes", "base","minified")

      # finish ant build process
      sh "cd #{from_dir}/build && ant replace-version prepend-header"

      #remove temp dirs
      rm_rf File.join(ui_deploy_dir_s, "ui", "minified")
      rm_rf File.join(ui_deploy_dir_s, "themes", "base","minified")

      ui_deploy_dir.each do |fl|
        cp_r( File.join("#{fl}", "themes"), File.join("#{to_repo_dir}", "themes") )
        cp_r( File.join("#{fl}", "ui"), File.join("#{to_repo_dir}", "ui") )
      end
    else
      FileList["#{from_dir}/*"].exclude(/^\.git.*/).each do |fl|
        update_file = File.join( to_repo_dir, File.basename(fl) )
        puts "updating #{update_file}"
        cp_r( fl, update_file)
      end
    end
  end
end

# clone or pull repos
def clone_or_pull( cp_repo, github_author, dir)

  cp_repo_dir = File.join( dir, cp_repo)
  cp_repo_git = File.join(cp_repo_dir, ".git")
  puts "cp_repo_dir #{cp_repo_dir}"
  puts "cp_repo_git #{cp_repo_git}"
  if File.exist?( cp_repo_git ) then
    puts "Updating #{cp_repo} with latest..."
    sh "git --git-dir=#{cp_repo_git} pull -q origin master"
  elsif (github_author).nil?
    puts "You must supply a repo from the repos hash table or provide the repo's author as well"
  else
    mkdir_p( cp_repo_dir )
    puts "Retrieving #{cp_repo} from Github..."
    sh "git clone git://github.com/#{github_author}/#{cp_repo}.git #{cp_repo_dir}"
  end
end

# get value from standard input
# usage: sure = ask('Are you sure you want to do that?')
def ask( message )
  print message + " "
  STDIN.gets.chomp
end

######
# min functions
######

def min_file (dir, mindir, fl, minifier)
  puts "Minifying js..."
  rake_dir = File.dirname( __FILE__ )

  minifier ||=  File.join( rake_dir, "config/build/yuicompressor-2.4.2.jar" )

  js_min = File.join( rake_dir, dir, File.basename(fl, '.js') + ".min.js" )

  # google compiler:
  if /google/ =~ minifier then
    sh "#{minifier} --js #{fl} --warning_level QUIET --js_output_file #{js_min}"
  else
    # yuicompressor:
    sh "java -jar #{minifier} --type js --preserve-semi -o #{js_min} #{fl}"
  end

  min = File.read( js_min )
  File.open(js_min, 'w') do |f|
    f.write min
  end

  puts js_min
end

def min_dir (dir, mindir, minifier)
  all_file = ''

  js_files = FileList["#{dir}/*.js"].exclude(/.*\.(min|tmp|all)\.js$/)

  js_files.each do |fl|
    min_file(dir, mindir, fl, minifier)
  end

  if (js_files.length > 1) then
    concat_base = ask("Concatenate .js files to... [filename.js/n]:\n")
    if (concat_base != 'n') then
      concat_base ||= "all.js"

      concat_file = File.join( "#{dir}", "#{concat_base}" )
      puts "Concatenating #{js_files.length} files..."
      concat_min = File.join( "#{mindir}", File.basename(concat_file, '.js') + '.min.js' )

      File.open(concat_file, 'w') do |f|
        f.write cat(js_files)
      end
      sh "#{minifier} --js #{concat_file} --warning_level QUIET --js_output_file #{concat_min}"

      # all_contents_min = File.read(concat_min)
      # File.open(concat_min, 'w') do |f|
      #   f.write intro_comment
      #   f.write all_contents_min
      # end
      puts "Minified to #{concat_min}"
    end
  end

end


# file dependencies
file script_dir do
  mkdir_p script_dir
end

file lib_dir do
  mkdir_p lib_dir
end

file repo_dir do
  mkdir_p repo_dir
end

file qunit do
  puts "Retrieving QUnit from Github..."
  sh "git clone git://github.com/jquery/qunit.git #{qunit_dir}"
end

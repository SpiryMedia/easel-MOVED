# to see a list of rake commands, type "rake -T" on the command line
# to get started with a new site, type "rake setup"

prefix = File.dirname( __FILE__ )

# vvvvv USER CONFIGURATION vvvvvvvv

# main directories
easel_dir = 'submodules/easel_framework'
script_dir = 'sites/website/public/assets/scripts'

# github repos
repos = { "Modernizr" => "Modernizr",
          "LABjs" => "getify",
          "JSON-js" => "douglascrockford",
          "jquery-ui" => "jquery",
          "jquery-carousel-lite" => "kswedberg",
          "jquery-defaulttext" => "kswedberg",
          "jquery-tinyvalidate" => "kswedberg",
          "jquery-dotimeout" => "cowboy",
          "jquery-bbq" => "cowboy",
          "cycle" => "malsup",
          "mediaelement" => "johndyer",
          "jqanalyze" => "mennovanslooten",
          "Respond" => "scottjehl"
        }

# standard non-lib "starter" scripts
scripts = [ "init",
            "utils",
            "cycles",
            "global-ajax",
            "validation"
          ]
# ^^^^^^ USER CONFIGURATION ^^^^^^^

# Directory variables
lib_dir = 'lib'
# Different scripts and lib directories can be set by
# setting DIR and/or LIB before calling rake
script_dir = ENV['DIR'] || script_dir
script_dir = File.join( prefix, script_dir )
lib_dir = ENV['LIB'] || lib_dir
lib_dir = File.join( script_dir, lib_dir )

easel_script_dir = File.join( prefix, easel_dir, 'easel/scripts' )

# Build and QUnit files/dirs
config_dir   = File.join( prefix, easel_dir, 'config' )
repo_dir     = File.join( config_dir, 'repos')
build_dir    = File.join( config_dir, 'build' )
test_dir     = File.join( build_dir, 'test' )
qunit_dir    = File.join( test_dir, "qunit" )
funcunit_dir = File.join( test_dir, "funcunit")
qunit        = File.join( qunit_dir, "qunit", "qunit.js" )

# Turn off output other than needed from `sh` and file commands
verbose(false)

# Tasks
desc "Updates js from GitHub - rake update[lib/jquery/all[reponame]"
task :update, [:which, :auth] => [repo_dir, lib_dir] do |t, args|
  args.with_defaults(:which => "lib", :auth => nil)
  auth = args.auth

  case args.which
  when "repos"
    Rake::Task[:clonepull].invoke

    repos.each  do |k,v|
      copy_repo("#{repo_dir}/#{k}", lib_dir)
    end
  when "all"
    Rake::Task[:updatejquery].invoke
    Rake::Task[:clonepull].invoke

    repos.each  do |k,v|
      copy_repo("#{repo_dir}/#{k}", lib_dir)
    end
    Rake::Task[:updatescripts].invoke("scripts")
    Rake::Task[:updatescripts].invoke
  when "lib"
    Rake::Task[:updatescripts].invoke
  else
    auth ||= repos["#{args.which}"]
    Rake::Task[:updaterepo].invoke(args.which, auth)
  end

  puts "Update routine completed for #{args.which}"
end

desc "Updates scripts: rake updatescripts[lib/scripts/[somescriptname]]"
task :updatescripts, [:which] => [easel_script_dir, lib_dir] do |t, args|
  args.with_defaults(:which => "lib")

  if easel_script_dir == script_dir then
    puts "Not gonna do it. easel directory and scripts directory are the same"
  else
    case args.which
    when "scripts"
      copy_files(easel_script_dir, script_dir)
    when "lib"
      copy_files(File.join(easel_script_dir,"lib"), lib_dir)
    else
      base_script = args.which.sub(".js", "") + ".js"
      from_script = File.join( easel_script_dir, base_script )

      if File.exist?(from_script) then
        to_script = File.join( script_dir, base_script )
        puts "copying from #{from_script} to #{to_script}"
        cp(from_script, to_script)
      else
        puts "File doesn't exist in Easel:"
        puts "#{from_script}"
      end
    end
  end

end

# desc "Copies files listed in scripts array to lib dir if not already there"
# task :addscripts => [easel_script_dir, lib_dir] do
#   if easel_script_dir == script_dir then
#     puts "Not gonna do it. easel directory and scripts directory are the same"
#   else
#     scripts.each do |scr|
#       easel_script = File.join( easel_script_dir, scr) + ".js"
#       project_script = File.join( script_dir, scr ) + ".js"
#       if File.exist?(easel_script) && !File.exist?(project_script) then
#         cp( easel_script, project_script )
#         puts "Copying #{scr} from easel to #{project_script}"
#       end
#     end
#   end
# end

desc "Updates a particular repo: rake updaterepo[reponame]"
task :updaterepo, [:repo, :author] => [repo_dir, lib_dir] do |t, args|
  rep = args.repo
  auth = args.author
  if auth.nil? && repos.has_key?("#{rep}") then
    auth = repos["#{rep}"]
  end

  if (auth) then
    Rake::Task[:clonepull].invoke("#{rep}", "#{auth}")
    copy_repo("#{repo_dir}/#{rep}", lib_dir)
    puts "updated #{rep} in #{lib_dir}"
  else
    puts "Couldn't find that repo in the hash. Add it to the Rakefile."
  end
end

desc "Clones repos if necessary; otherwise pulls latest"
task :clonepull, [:repo, :author] => [repo_dir, lib_dir] do |t, args|
  args.with_defaults(:repo => "all", :author => nil)

  if args.repo == "all" then
    repos.each_pair do |k,v|
      rdir = File.join(repo_dir, "#{k}")
      rdir_git = File.join( rdir, '.git')
      mkdir_p rdir

      if File.exist?( rdir_git )
        puts "Updating #{k} with latest..."
        sh "git --git-dir=#{rdir_git} pull -q origin master"
      else
        puts "Cloning #{k} from Github..."
        sh "git clone git://github.com/#{v}/#{k}.git #{rdir}"
      end

    end

    clone_or_pull("qunit", "jquery", test_dir)
  elsif args.repo == "qunit" then
    clone_or_pull("qunit", "jquery", test_dir)
  elsif args.repo == "funcunit" then
    clone_or_pull("funcunit", "jupiterjs", test_dir)
  else
    clone_or_pull( args.repo, args.author, repo_dir)
  end

end


desc "Updates QUnit and sets up test files in a test directory"
task :test do

  Rake::Task[:clonepull].invoke("qunit")
  script_test = File.join(script_dir, "test")
  script_qunit = File.join(script_test, "qunit")
  mkdir_p script_test
  mkdir_p script_qunit

  cp( qunit, script_qunit )
  cp( File.join(qunit_dir, "qunit/qunit.css"), script_qunit )
  if !File.exist?( File.join(script_test, "index.html") ) then
    cp( File.join(test_dir, "index.html"), script_test )
  end
  touch( File.join(script_test, "tests.js") )
end

desc "Updates jQuery core to latest stable release"
task :updatejquery => [lib_dir] do
  jq_latest = File.join( lib_dir, "jquery-latest.js" )
  touch( "#{jq_latest}" )
  jq_url = "http://code.jquery.com/jquery-latest.js"

  puts "downloading jQuery from #{jq_url}..."
  sh "wget -O #{jq_latest} #{jq_url}"
  puts "copied jQuery core to #{jq_latest}"

  v_latest = IO.readlines(jq_latest)[0..2].join()
  v_latest = v_latest.scan(/ v(1.+)$/)
  jq_version = File.join( lib_dir, "jquery-#{v_latest}.js" )

  if !File.exist?( jq_version ) then
    cp( jq_latest, jq_version )
  puts "******************* vv NOTICE vv ***********************\n"
    puts "***** New jQuery file added to lib directory: jquery-#{v_latest}.js *****"
  end

end

task :default => "all"

desc "Sets up scripts "
task :all => [:setup] do
  Rake::Task[:clean].invoke
  puts "Everything in its right place."
end

desc "Sets up site with JS files/plugins and test dir"
task :setup do
  Rake::Task[:update].invoke("all")
  puts "JS setup complete!"
end

desc "Removes cloned repos"
task :clean do
  puts "Removing repo directory: #{repo_dir}..."
  rm_rf repo_dir

  puts "Removing temporary qunit directory..."
  rm_rf qunit_dir
end

desc "List as many directories as I can think of"
task :listdirs do
  puts "config_dir  #{config_dir}"
  puts "repo_dir  #{repo_dir}"
  puts "build_dir  #{build_dir}"
  puts "test_dir   #{test_dir}"
  puts "qunit_dir   #{qunit_dir}"
  puts "funcunit_dir  #{funcunit_dir}"
  puts "script_dir  #{script_dir}"
  puts "lib_dir  #{lib_dir}"
  puts "easel_script_dir  #{easel_script_dir}"
end

# copy .js files from one dir to another
def copy_files(from_dir, to_dir)

  FileList["#{from_dir}/*.js"].each do |fl|
    update_file = File.join( to_dir, File.basename(fl) )
    puts "copying #{fl}"
    puts "updating #{update_file}"
    cp( fl, update_file )
  end
end

# copy repos from repos dir to lib dir
def copy_repo(from_dir, to_dir)
  from_base_dir = File.basename(from_dir)

  if File.exist?(from_dir) then
    to_repo_dir = File.join(to_dir, from_base_dir)
    mkdir_p to_repo_dir

    if from_base_dir == 'jquery-ui' then
      ui_dist_dir = File.join(from_dir, "build/dist")
      unless File.exist?( ui_dist_dir )
        sh "cd #{from_dir}/build && ant"
      end
      FileList["#{ui_dist_dir}/*"].exclude(/\.zip$/).each do |fl|
        cp_r( File.join("#{fl}", "themes"), File.join("#{to_repo_dir}", "themes") )
        cp_r( File.join("#{fl}", "ui"), File.join("#{to_repo_dir}", "ui") )
      end
    else
      FileList["#{from_dir}/*"].exclude(/^\.git.*/).each do |fl|
        update_file = File.join( to_repo_dir, File.basename(fl) )
        puts "updating #{update_file}"
        cp_r( fl, update_file)
      end
    end
  end
end

# clone or pull repos
def clone_or_pull( cp_repo, github_author, dir)

  cp_repo_dir = File.join( dir, cp_repo)
  cp_repo_git = File.join(cp_repo_dir, ".git")
  puts "cp_repo_dir #{cp_repo_dir}"
  puts "cp_repo_git #{cp_repo_git}"
  if File.exist?( cp_repo_git ) then
    puts "Updating #{cp_repo} with latest..."
    sh "git --git-dir=#{cp_repo_git} pull -q origin master"
  elsif (github_author).nil?
    puts "You must supply a repo from the repos hash table or provide the repo's author as well"
  else
    mkdir_p( cp_repo_dir )
    puts "Retrieving #{cp_repo} from Github..."
    sh "git clone git://github.com/#{github_author}/#{cp_repo}.git #{cp_repo_dir}"
  end
end

# file dependencies
file lib_dir do
  mkdir_p lib_dir
end

file repo_dir do
  mkdir_p repo_dir
end

file qunit do
  puts "Retrieving QUnit from Github..."
  sh "git clone git://github.com/jquery/qunit.git #{qunit_dir}"
end
